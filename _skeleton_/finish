#!/usr/bin/env python

import logging
import sys

# import external library
sys.path.append('/var/service')
from runit_helper import (
    get_logger,
    stop_dependant_services,
    update_crash_log,
)
# The functions above are examples and default configuration,
# you should write your own for custom implementation.


# This must be the same as the directory name,
# it will be used to poll the status of the service using sv.
service_name = '_skeleton_'


# Get a logging backend, if you have /dev/log then
# syslog will be used otherwise will use
# logging.handlers.RotatingFileHandler with /var/log/messages.
log = get_logger(service_name, logging.INFO)


# Arguments to this script given by runit.
exit_code = sys.argv[1]
status = sys.argv[2]


# runit failed to start the service
if exit_code == 111 and status == 0:
    log.error('runsv cannot start ./run')
# This line actually never performed, runit doesn't run ./finish
# on `sv down` :(
elif exit_code == 0:
    log.info('stopped with signal %s' % status)
# Our daemon has crashed :((
else:
    log.warn('crashed with code %s' % exit_code)
    # record the time of event
    update_crash_log(service_name)


# Check reverse dependency, if there are services that depends
# on this one to function, stop them.
stop_dependant_services(service_name, log)
